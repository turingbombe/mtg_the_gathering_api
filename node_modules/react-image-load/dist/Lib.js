'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SlidePreview = function (_Component) {
  _inherits(SlidePreview, _Component);

  function SlidePreview() {
    var _Object$getPrototypeO;

    var _temp, _this, _ret;

    _classCallCheck(this, SlidePreview);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(SlidePreview)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.state = {
      src: ''
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(SlidePreview, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.src) {
        this.promise = this.fetchBlob(this.props);
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _props = this.props;
      var src = _props.src;
      var headers = _props.headers;

      if (src !== nextProps.src || headers !== nextProps.headers) {
        if (this.promise) {
          this.promise.cancel();
        }
        if (this.props.src) {
          this.promise = this.fetchBlob(nextProps);
        }
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.promise) {
        this.promise.cancel();
      }
    }
  }, {
    key: 'fetchBlob',
    value: function fetchBlob(props) {
      var _this2 = this;

      var promise = fetch(props.src, {
        headers: props.headers
      });

      var cancelablePromise = (0, _utils.makeCancelable)(promise);

      cancelablePromise.then(function (response) {
        return response.blob();
      }).then(function (blob) {
        return URL.createObjectURL(blob);
      }).then(function (src) {
        return _this2.setState({ src: src });
      }).catch(function () {});

      return cancelablePromise;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props;
      var width = _props2.width;
      var height = _props2.height;
      var transform = _props2.transform;
      var className = _props2.className;
      var rotate = _props2.rotate;

      var rest = _objectWithoutProperties(_props2, ['width', 'height', 'transform', 'className', 'rotate']);

      var _ref = transform && [90, 270].includes(rotate) ? [height, width] : [width, height];

      var _ref2 = _slicedToArray(_ref, 2);

      var _width = _ref2[0];
      var _height = _ref2[1];
      var src = this.state.src;


      return _react2.default.createElement('img', _extends({
        role: 'img'
      }, rest, {
        src: src,
        width: _width,
        height: _height,
        className: 'blob-image rotate' + rotate + ' ' + className
      }));
    }
  }]);

  return SlidePreview;
}(_react.Component);

SlidePreview.viewport = [_react.PropTypes.string, _react.PropTypes.number];
SlidePreview.propTypes = {
  src: _react.PropTypes.string,
  headers: _react.PropTypes.object,
  width: _react.PropTypes.oneOfType(SlidePreview.viewport),
  height: _react.PropTypes.oneOfType(SlidePreview.viewport),
  rotate: _react.PropTypes.oneOf([0, 90, 180, 270]),
  className: _react.PropTypes.string,
  transform: _react.PropTypes.bool
};
SlidePreview.defaultProps = {
  className: '',
  transform: true
};
exports.default = SlidePreview;